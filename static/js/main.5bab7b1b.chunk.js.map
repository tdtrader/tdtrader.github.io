{"version":3,"sources":["logo.svg","sections/newsletter-sign-up.js","sections/disclaimer.js","sections/footer.js","sections/count-table.js","sections/loading-indicator.js","sections/error-message.js","sections/table-metadata.js","sections/intro-section.js","sections/main-content.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NewsletterSignUp","react","className","action","method","id","name","target","noValidate","htmlFor","type","placeholder","aria-label","style","position","left","aria-hidden","tabIndex","defaultValue","Disclaimer","Footer","newsletter_sign_up_NewsletterSignUp","disclaimer_Disclaimer","SortType","AlphabeticallyAscending","AlphabeticallyDescending","CountAscending","CountDescending","CountTable","_ref","data","setSortType","currentSortType","onFilterTicker","onFilterName","onFilterCount","isAlphaAsc","isAlphaDesc","isCountAsc","isCountDesc","onClick","onChange","e","value","map","d","key","ticker","tdCount","LoadingIndicator","ErrorMessage","error","state","TableMetaData","totalRows","rowShowCount","showMore","showAllRows","lastFetch","showActions","showMoreCount","Date","toLocaleString","timeZone","IntroSection","src","logo","alt","href","MainContent","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getMetaDataComponent","table_metadata_TableMetaData","showTop100","setState","tickerFilter","nameFilter","countFilter","sortType","count","length","sortData","sortedData","sort","a","b","filterData","_this$state","filter","tickerFilterResult","toLowerCase","includes","nameFilterResult","parseInt","inherits","createClass","_this2","getData","catch","console","JSON","stringify","_getData","asyncToGenerator","regenerator_default","mark","_callee","response","unformattedData","wrap","_context","prev","next","fetch","cache","sent","json","keys","forEach","push","now","stop","apply","arguments","filteredData","slicedData","slice","intro_section_IntroSection","count_table_CountTable","error_message_ErrorMessage","loading_indicator_LoadingIndicator","React","App","react_default","createElement","main_content_MainContent","footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5bab7b1b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ac9f53f1.svg\";","import * as React from \"react\";\n\nexport const NewsletterSignUp = () => {\n  return (\n    <form\n      className=\"validate input-group mb-3 td-trader-footer__subscribe-form\"\n      action=\"https://tdtrader.us20.list-manage.com/subscribe/post?u=5b7695e66d89a9bedf569a9a9&amp;id=8074d54825\"\n      method=\"post\"\n      id=\"mc-embedded-subscribe-form\"\n      name=\"mc-embedded-subscribe-form\"\n      target=\"_blank\"\n      noValidate\n    >\n      <input\n        htmlFor=\"mce-EMAIL\"\n        type=\"email\"\n        className=\"required form-control\"\n        placeholder=\"email address\"\n        aria-label=\"Email address\"\n        id=\"mce-EMAIL\"\n        name=\"email\"\n      />\n      {/* \n                real people should not fill this next input in and expect good things\n                do not remove this or risk form bot signups \n              */}\n      <div style={{ position: \"absolute\", left: \"-5000px\" }} aria-hidden=\"true\">\n        <input\n          type=\"text\"\n          name=\"b_5b7695e66d89a9bedf569a9a9_8074d54825\"\n          tabIndex=\"-1\"\n          defaultValue=\"\"\n        />\n      </div>\n\n      <div className=\"input-group-append\">\n        <button className=\"btn btn-outline-secondary\" type=\"submit\">\n          Subscribe\n        </button>\n      </div>\n    </form>\n  );\n};\n","import * as React from 'react';\n\nexport const Disclaimer = () => {\n    return (\n        <div>\n            <h2>Disclaimer</h2>\n            <p>\n              Before using this Telegram bot, please make sure that you note the following important information:\n                </p>\n            <h3>\n              Do your Own Research\n                </h3>\n            <p>\n              Content produced by the bot is intended to be used and must be used for informational purposes only.\n              It is very important to do your own analysis before making any investment based on your own personal circumstances.\n              You should take independent financial advice from a professional in connection with, or independently research and verify,any information produced by the bot and wish to rely upon, whether for the purpose of making an investment decision or otherwise.\n                </p>\n            <h3>No Investment Advice</h3>\n            <p>\n              TDtrader.net is not a broker/dealer, we are not an investment advisor, we have no access to non-public information about publicly traded companies, and this is not a place for the giving or receiving of financial advice, advice concerning investment decisions or tax or legal advice.\n              We are not regulated by the Financial Services Authority. Our bot offering is solely for informational &amp; educational purposes so that users can easily run their own valuations.\n                </p>\n            <h3>No reliance</h3>\n            <p>\n              Accordingly, we will not be liable, whether in contract, tort (including negligence) or otherwise, in respect of any damage, expense or other loss you may suffer arising out of such information or any reliance you may place upon such information.\n                </p>\n            <h3>Investment Warnings</h3>\n            <p>\n              We would like to draw your attention to the following important investment warnings:\n            </p>\n            <ul>\n              <li>The value of shares and investments and the income derived from them can go down as well as up;</li>\n              <li>Investors may not get back the amount they invested - losing one's shirt is a real risk;</li>\n              <li>Past performance is not a guide to future performance.</li>\n            </ul>\n        </div>\n    )\n}","import * as React from 'react';\nimport { NewsletterSignUp } from './newsletter-sign-up';\nimport { Disclaimer } from './disclaimer';\n\nexport const Footer = () => {\n  return (\n    <div className=\"td-trader-footer\">\n      <div className=\"container\">\n        <div className=\"row justify-content-lg-center\">\n          <div className=\"col col-12 col-sm-12 col-md-8 col-lg-4\">\n            <h2>Get updates</h2>\n            <p>\n              We are working on more features such as additional currency pairs, timeframes and exchanges.\n              Sign up below for updates.\n            </p>\n\n            <NewsletterSignUp />\n          </div>\n          <div className=\"col col-12 col-sm-12 col-md-12 col-lg-5 td-trader-footer__disclaimer\">\n            <Disclaimer />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","import * as React from \"react\";\n\nexport const SortType = {\n  AlphabeticallyAscending: \"AlphabeticallyAscending\",\n  AlphabeticallyDescending: \"AlphabeticallyDescending\",\n  CountAscending: \"CountAscending\",\n  CountDescending: \"CountDescending\"\n};\n\nexport const CountTable = ({\n  data,\n  setSortType,\n  currentSortType,\n  onFilterTicker,\n  onFilterName,\n  onFilterCount\n}) => {\n  const isAlphaAsc = currentSortType === SortType.AlphabeticallyAscending;\n  const isAlphaDesc = currentSortType === SortType.AlphabeticallyDescending;\n  const isCountAsc = currentSortType === SortType.CountAscending;\n  const isCountDesc = currentSortType === SortType.CountDescending;\n  return (\n    <table className=\"td-trader-count-table\">\n      <thead>\n        <tr>\n          <th\n            className=\"sortable\"\n            onClick={() =>\n              setSortType(\n                isAlphaAsc\n                  ? SortType.AlphabeticallyDescending\n                  : SortType.AlphabeticallyAscending\n              )\n            }\n          >\n            Ticker {isAlphaAsc && <i className=\"fas fa-chevron-down\"></i>}\n            {isAlphaDesc && <i className=\"fas fa-chevron-up\"></i>}\n          </th>\n          <th\n            className=\"sortable\"\n            onClick={() =>\n              setSortType(\n                isCountAsc ? SortType.CountDescending : SortType.CountAscending\n              )\n            }\n          >\n            Count {isCountAsc && <i className=\"fas fa-chevron-down\"></i>}\n            {isCountDesc && <i className=\"fas fa-chevron-up\"></i>}\n          </th>\n          <th>Name</th>\n        </tr>\n        <tr>\n          <th>\n            <input\n              placeholder=\"Filter ticker\"\n              onChange={e => onFilterTicker(e.target.value)}\n            />\n          </th>\n          <th>\n            <input\n              placeholder=\"Filter count\"\n              type=\"number\"\n              onChange={e => onFilterCount(e.target.value)}\n            />\n          </th>\n          <th>\n            <input\n              placeholder=\"Filter name\"\n              onChange={e => onFilterName(e.target.value)}\n            />\n          </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {data.map(d => {\n          return (\n            <tr key={d.ticker}>\n              <td>{d.ticker}</td>\n              <td>{d.tdCount}</td>\n              <td>{d.name}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import * as React from \"react\";\n\nexport const LoadingIndicator = () => {\n  return <div className=\"td-trader-loading-data\">Loading data...</div>;\n};\n","import * as React from \"react\";\n\nexport const ErrorMessage = ({ error }) => {\n  return (\n    <div className=\"td-trader-fetch-error\">\n      Error loading data: {this.state.error}\n    </div>\n  );\n};\n","import * as React from \"react\";\n\nexport const TableMetaData = ({\n  totalRows,\n  rowShowCount,\n  showMore,\n  showAllRows,\n  lastFetch,\n  showActions\n}) => {\n  let showMoreCount = 100;\n  if (rowShowCount <= totalRows) {\n    if (totalRows - rowShowCount <= 100) {\n      showMoreCount = totalRows - rowShowCount;\n    }\n  }\n  return (\n    <React.Fragment>\n      <div className=\"td-trader-count-table-metadata\">\n        <div>\n          <strong>Total rows:</strong> {totalRows}\n        </div>\n        <div>\n          <strong>Showing:</strong> {rowShowCount}\n        </div>\n        <div>\n          <strong>Last fetch:</strong>{\" \"}\n          {new Date(lastFetch).toLocaleString(\"en-US\", { timeZone: \"UTC\" })}\n        </div>\n      </div>\n\n      {showActions && (\n        <div className=\"td-trader-count-table-metadata\">\n          <div>\n            {showMoreCount !== 0 && (\n              <button\n                className=\"btn btn-secondary btn-sm\"\n                onClick={() => showMore(showMoreCount)}\n              >\n                <i className=\"fas fa-plus\"></i> Show {showMoreCount} more\n              </button>\n            )}\n            {showMoreCount !== 0 && (\n              <button\n                className=\"btn btn-secondary btn-sm\"\n                onClick={showAllRows}\n              >\n                <i className=\"fas fa-plus\"></i> Show all\n              </button>\n            )}\n          </div>\n        </div>\n      )}\n    </React.Fragment>\n  );\n};\n","import * as React from \"react\";\nimport logo from \"../logo.svg\";\n\nconst TELEGRAM_URL = \"http://t.me/TDupdater_bot\";\n\nexport const IntroSection = () => {\n  return (\n    <React.Fragment>\n      <img src={logo} className=\"td-trader-main-content__logo\" alt=\"logo\" />\n      <h1>Sequential Countdown Tracker</h1>\n      <p>\n        TDtrader is a Telegram bot that keeps you up to date on the current TD\n        count. You simply get a notification on every candle close.\n      </p>\n      <a href={TELEGRAM_URL} className=\"btn btn-primary\">\n        Pair with Telegram\n        <span>\n          <i className=\"fab fa-telegram-plane\"></i>\n        </span>\n      </a>\n    </React.Fragment>\n  );\n};\n","import * as React from \"react\";\nimport { CountTable, SortType } from \"./count-table\";\nimport { LoadingIndicator } from \"./loading-indicator\";\nimport { ErrorMessage } from \"./error-message\";\nimport { TableMetaData } from \"./table-metadata\";\nimport { IntroSection } from \"./intro-section\";\n\nconst TICKER_URL = \"https://tdtrader-cc108.firebaseio.com/stocks/.json\";\n\nexport class MainContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null,\n      error: null,\n      rowShowCount: 100,\n      lastFetch: null,\n      sortType: SortType.CountAscending,\n      tickerFilter: null,\n      countFilter: null,\n      nameFilter: null\n    };\n  }\n  componentDidMount() {\n    this.getData().catch(error => {\n      console.error(\"Issue fetching data\");\n      this.setState({\n        error: JSON.stringify(error),\n        data: null\n      });\n    });\n  }\n\n  async getData() {\n    let response = await fetch(TICKER_URL, { cache: \"no-store\" });\n    let unformattedData = await response.json();\n    const data = [];\n    Object.keys(unformattedData).forEach(key => {\n      data.push({\n        ticker: key,\n        name: unformattedData[key].name,\n        tdCount: unformattedData[key].tdCount\n      });\n    });\n    this.setState({\n      data,\n      error: null,\n      lastFetch: Date.now()\n    });\n  }\n\n  getMetaDataComponent = (showActions, totalRows, rowShowCount) => {\n    return (\n      <TableMetaData\n        totalRows={totalRows}\n        rowShowCount={rowShowCount}\n        showMore={this.showMore}\n        showAllRows={this.showAllRows}\n        showTop100={this.showTop100}\n        lastFetch={this.state.lastFetch}\n        showActions={showActions}\n      />\n    );\n  };\n\n  render() {\n    const sortedData = this.sortData();\n    const filteredData = this.filterData(sortedData);\n    const slicedData = filteredData.slice(0, this.state.rowShowCount);\n\n    return (\n      <div className=\"td-trader-main-content\">\n        <div className=\"container\">\n          <div className=\"row justify-content-between\">\n            <div className=\"col col-sm-12 col-md-12 col-lg-4\">\n              <IntroSection />\n            </div>\n            <div className=\"col col-sm-12 col-md-12 col-lg-7\">\n              {this.state.data ? (\n                <React.Fragment>\n                  {this.getMetaDataComponent(\n                    false,\n                    filteredData.length,\n                    slicedData.length\n                  )}\n                  <CountTable\n                    data={slicedData}\n                    currentSortType={this.state.sortType}\n                    setSortType={this.setSortType}\n                    onFilterTicker={this.onFilterTicker}\n                    onFilterName={this.onFilterName}\n                    onFilterCount={this.onFilterCount}\n                  />\n                  {this.getMetaDataComponent(\n                    true,\n                    filteredData.length,\n                    slicedData.length\n                  )}\n                </React.Fragment>\n              ) : this.state.error ? (\n                <ErrorMessage error={this.state.error} />\n              ) : (\n                <LoadingIndicator />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  onFilterTicker = value => {\n    this.setState({\n      tickerFilter: value || null\n    });\n  };\n\n  onFilterName = value => {\n    this.setState({\n      nameFilter: value || null\n    });\n  };\n\n  onFilterCount = value => {\n    this.setState({\n      countFilter: value || null\n    });\n  };\n\n  setSortType = sortType => {\n    this.setState({\n      sortType\n    });\n  };\n\n  showMore = count => {\n    this.setState({\n      rowShowCount: this.state.rowShowCount + count\n    });\n  };\n\n  showAllRows = () => {\n    this.setState({\n      rowShowCount: this.state.data.length\n    });\n  };\n\n  showTop100 = () => {\n    this.setState({\n      rowShowCount: 100\n    });\n  };\n\n  sortData = () => {\n    const data = this.state.data;\n    if (!data) return [];\n\n    let sortedData;\n\n    switch (this.state.sortType) {\n      case SortType.AlphabeticallyAscending:\n        sortedData = data.sort((a, b) => {\n          return a.ticker < b.ticker ? -1 : b.ticker > a.ticker ? 1 : 0;\n        });\n        break;\n      case SortType.AlphabeticallyDescending:\n        sortedData = data.sort((a, b) => {\n          return b.ticker < a.ticker ? -1 : a.ticker > b.ticker ? 1 : 0;\n        });\n        break;\n      case SortType.CountAscending:\n        sortedData = data.sort((a, b) => {\n          return b.tdCount < a.tdCount ? -1 : a.tdCount > b.tdCount ? 1 : 0;\n        });\n        break;\n      case SortType.CountDescending:\n        sortedData = data.sort((a, b) => {\n          return a.tdCount < b.tdCount ? -1 : b.tdCount > a.tdCount ? 1 : 0;\n        });\n        break;\n      default:\n        sortedData = data;\n    }\n\n    return sortedData;\n  };\n\n  filterData = data => {\n    const { countFilter, tickerFilter, nameFilter } = this.state;\n\n    const filteredData = data.filter(d => {\n      const tickerFilterResult =\n        !tickerFilter ||\n        d.ticker.toLowerCase().includes(tickerFilter.toLowerCase());\n      const nameFilterResult =\n        !nameFilter || d.name.toLowerCase().includes(nameFilter.toLowerCase());\n      const countFilterResult =\n        !countFilter || d.tdCount === parseInt(countFilter, 10);\n      return countFilterResult && tickerFilterResult && nameFilterResult;\n    });\n\n    return filteredData;\n  };\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Footer } from './sections/footer';\nimport { MainContent } from './sections/main-content';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"td-trader\">\n        <MainContent />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}